name: Build precompiled NIFs

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.17"]
        job:
          - { target: aarch64-apple-darwin        , os: macos-14      }
          - { target: x86_64-unknown-linux-gnu    , os: ubuntu-20.04  }

    env:
        RUSTLER_NIF_VERSION: ${{ matrix.nif }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Install prerequisites
      shell: bash
      run: |
        case ${{ matrix.job.target }} in
          arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
          aarch64-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
        esac

    - name: Extract project version
      shell: bash
      run: |
        # Get the project version from mix.exs
        echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ matrix.job.target }}

    - name: Install SDKMAN! and GraalVM Java
      shell: bash
      run: |
        curl -s "https://get.sdkman.io" | bash
        source "$HOME/.sdkman/bin/sdkman-init.sh"
        sdk install java 23.0.1-graalce

    - name: Build the project
      id: build-crate
      uses: philss/rustler-precompiled-action@v1.1.4
      with:
        project-name: nif_extractous
        project-version: ${{ env.PROJECT_VERSION }}
        target: ${{ matrix.job.target }}
        nif-version: ${{ matrix.nif }}
        use-cross: ${{ matrix.job.use-cross }}
        project-dir: "./"

    - name: Modify archive
      shell: bash
      run: |
        TEMP_DIR=$(mktemp -d)
        
        tar -xzf "${{ steps.build-crate.outputs.file-path }}" -C "$TEMP_DIR" || { 
            echo "::error::Failed to extract archive"; exit 1; 
        }
        
        NIF_LIB=$(find "$TEMP_DIR" -type f -name "libnif_extractous*")

        if [ -z "$NIF_LIB" ]; then
            echo "::error::Could not find libnif_extractous library in archive"
            exit 1
        fi

        TIKA_LIB=$(find target -type f -path "*/libs/libtika_native.*" 2>/dev/null)

        if [ -z "$TIKA_LIB" ]; then
            echo "::error::Could not find libtika_native library in build directory"
            if [ -d "build" ]; then
                echo "Directory contents of build:"
                ls -R build/
            else
                echo "Build directory does not exist."
            fi
            exit 1
        fi
        
        cp "$TIKA_LIB" "$TEMP_DIR/$(basename "$TIKA_LIB")"

        # note seems duplicative but rolling with it for now
        if [[ "${{ matrix.job.target }}" == *darwin* ]]; then
            install_name_tool -add_rpath @loader_path "$NIF_LIB"
            install_name_tool -change @rpath/libtika_native.dylib @loader_path/$(basename "$TIKA_LIB") "$NIF_LIB"
        fi

        if [[ "${{ matrix.job.target }}" == *linux* ]]; then
            patchelf --set-rpath '$ORIGIN' "$NIF_LIB"
        fi
        
        cd "$TEMP_DIR" || exit 1
        tar -czf "${{ steps.build-crate.outputs.file-path }}.new" ./*
        cd - || exit 1
        
        mv "$TEMP_DIR/$(basename "${{ steps.build-crate.outputs.file-path }}").new" "${{ steps.build-crate.outputs.file-path }}"

        rm -rf "$TEMP_DIR"

    - name: Artifact upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build-crate.outputs.file-name }}
        path: ${{ steps.build-crate.outputs.file-path }}

    - name: Publish archives and packages
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ steps.build-crate.outputs.file-path }}
      if: startsWith(github.ref, 'refs/tags/')
