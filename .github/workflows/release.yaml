name: Build precompiled NIFs

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.17"]
        job:
          - { target: aarch64-apple-darwin        , os: macos-14      }
          - { target: aarch64-unknown-linux-gnu   , os: ubuntu-20.04, use-cross: true }
          - { target: x86_64-unknown-linux-gnu    , os: ubuntu-20.04  }

    env:
        RUSTLER_NIF_VERSION: ${{ matrix.nif }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Extract project version
      shell: bash
      run: |
        # Get the project version from mix.exs
        echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ matrix.job.target }}

    - name: Install SDKMAN! and GraalVM Java
      shell: bash
      run: |
        curl -s "https://get.sdkman.io" | bash
        source "$HOME/.sdkman/bin/sdkman-init.sh"
        sdk install java 23.0.1-graalce

    - name: Install OpenSSL dependencies
      if: matrix.job.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install -y pkg-config gcc-aarch64-linux-gnu
        sudo apt-get install -y libssl-dev:arm64

    - name: Build the project
      id: build-crate
      uses: philss/rustler-precompiled-action@v1.1.4
      with:
        project-name: nif_extractous
        project-version: ${{ env.PROJECT_VERSION }}
        target: ${{ matrix.job.target }}
        nif-version: ${{ matrix.nif }}
        use-cross: ${{ matrix.job.use-cross }}
        cross-version: ${{ matrix.job.cross-version || 'from-source' }}
        project-dir: "./"

    - name: Modify archive
      shell: bash
      run: |
        set -euo pipefail

        TEMP_DIR=$(mktemp -d)
        
        tar -xzf "${{ steps.build-crate.outputs.file-path }}" -C "$TEMP_DIR" || { 
            echo "::error::Failed to extract archive"; exit 1; 
        }
        
        NIF_LIB=$(find "$TEMP_DIR" -type f -name "libnif_extractous*") || {
            echo "::error::Failed to search for NIF library"; exit 1;
        }

        if [ -z "$NIF_LIB" ]; then
            echo "::error::Could not find libnif_extractous library in archive"
            exit 1
        fi

        TIKA_LIB=$(find target -type f -path "*/libs/libtika_native.*" 2>/dev/null)
        TIKA_BUILD_LIB=$(find target -type f -path "*/nativeCompile/libtika_native.{so,dylib}" 2>/dev/null)

        echo "Found tika libraries at:"
        echo "Build lib: $TIKA_BUILD_LIB"
        echo "Libs lib: $TIKA_LIB"

        if [ -z "$TIKA_BUILD_LIB" ] && [ -z "$TIKA_LIB" ]; then
            echo "::error::Could not find libtika_native library in either location"
            if [ -d "target" ]; then
                echo "Directory contents of target:"
                find target -type f -name "libtika_native.*"
            fi
            exit 1
        fi

        if [ -n "$TIKA_BUILD_LIB" ]; then
            cp "$TIKA_BUILD_LIB" "$TEMP_DIR/$(basename "$TIKA_BUILD_LIB")"
            TIKA_LIB="$TIKA_BUILD_LIB"
        elif [ -n "$TIKA_LIB" ]; then
            cp "$TIKA_LIB" "$TEMP_DIR/$(basename "$TIKA_LIB")"
            TIKA_LIB="$TIKA_LIB"
        fi

        if [[ "${{ matrix.job.target }}" == *darwin* ]]; then
            echo "Before mods:"
            otool -L "$NIF_LIB"

            ORIGINAL_PATHS=$(otool -L "$NIF_LIB" | grep libtika_native | awk '{print $1}')

            while IFS= read -r path; do
                if [ -n "$path" ]; then
                    echo "Changing path: $path"
                    install_name_tool -change "$path" "@loader_path/$(basename "$TIKA_LIB")" "$NIF_LIB"
                fi
            done <<< "$ORIGINAL_PATHS"

            echo "After mods:"
            otool -L "$NIF_LIB"
        fi

        if [[ "${{ matrix.job.target }}" == *linux* ]]; then
            patchelf --set-rpath '$ORIGIN' "$NIF_LIB"
        fi
        
        cd "$TEMP_DIR" || exit 1
        tar -czf "${{ steps.build-crate.outputs.file-path }}.new" ./* || {
            echo "::error::Failed to create new archive"
            exit 1
        }
        cd - || exit 1
        
        mv "$TEMP_DIR/$(basename "${{ steps.build-crate.outputs.file-path }}").new" "${{ steps.build-crate.outputs.file-path }}" || {
            echo "::error::Failed to move new archive"
            exit 1
        }

        rm -rf "$TEMP_DIR"

    - name: Artifact upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build-crate.outputs.file-name }}
        path: ${{ steps.build-crate.outputs.file-path }}

    - name: Publish archives and packages
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ steps.build-crate.outputs.file-path }}
      if: startsWith(github.ref, 'refs/tags/')
